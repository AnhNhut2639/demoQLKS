<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        EQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAR
        EQEREBERAREQEREBERB//9k=
</value>
  </data>
</root>